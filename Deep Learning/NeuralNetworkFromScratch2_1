{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPu+mPjSPDACEOch772kKA7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"Dc4G34gLRlzn","executionInfo":{"status":"ok","timestamp":1704192184605,"user_tz":-330,"elapsed":593,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"outputs":[],"source":["import numpy as np"]},{"cell_type":"code","source":["x=np.array([[1,1,1,1],[1,0,1,1],[0,1,0,1]])\n","x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ank5vnjKSbkh","executionInfo":{"status":"ok","timestamp":1704192185233,"user_tz":-330,"elapsed":22,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"182eeef9-6a74-4aaf-e91d-86a8d309caee"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 1, 1, 1],\n","       [1, 0, 1, 1],\n","       [0, 1, 0, 1]])"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["y=np.array([[1],[0],[1]])\n","y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WcQKiHTaSpbA","executionInfo":{"status":"ok","timestamp":1704192185234,"user_tz":-330,"elapsed":16,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"c3679561-d2f4-40ce-f7ac-e270ea66b94f"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1],\n","       [0],\n","       [1]])"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["def sigmoid(x):\n","  return 1/(1+np.exp(-x))"],"metadata":{"id":"B2IiXNf9TEks","executionInfo":{"status":"ok","timestamp":1704192185234,"user_tz":-330,"elapsed":11,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def derivative_sigmoid(x):\n","  return x*(1-x)"],"metadata":{"id":"nBd355ExTVo9","executionInfo":{"status":"ok","timestamp":1704192185234,"user_tz":-330,"elapsed":11,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["epoch=5000\n","lr=0.1\n","input_neurons=x.shape[1]\n","hidden_neurons=3\n","output_neurons=1"],"metadata":{"id":"pAKUNR-GToMF","executionInfo":{"status":"ok","timestamp":1704192185235,"user_tz":-330,"elapsed":11,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["wh=np.random.uniform(size=(input_neurons,hidden_neurons))\n","bh=np.random.uniform(size=(1,hidden_neurons))\n","wo=np.random.uniform(size=(hidden_neurons,output_neurons))\n","bo=np.random.uniform(size=(1,output_neurons))"],"metadata":{"id":"Tgxh9XXdUK4X","executionInfo":{"status":"ok","timestamp":1704192185235,"user_tz":-330,"elapsed":11,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["for i in range(epoch):\n","  #forward\n","  hidden_input=np.dot(x,wh)\n","  hidden_input=hidden_input+bh\n","  hidden_activation=sigmoid(hidden_input)\n","  output_layer=np.dot(hidden_activation,wo)\n","  output=sigmoid(output_layer)\n","  #backward\n","  E=y-output\n","  slope_output=derivative_sigmoid(output)\n","  slope_hidden=derivative_sigmoid(hidden_activation)\n","  d_output=E*slope_output\n","  error_hidden=d_output.dot(wo.T)\n","  d_hidden=error_hidden*slope_hidden\n","  wo+=hidden_activation.T.dot(d_output)*lr\n","  bo+=np.sum(d_output,axis=0,keepdims=True)*lr\n","  wh+=x.T.dot(d_hidden)*lr\n","  bh+=np.sum(d_hidden,axis=0,keepdims=True)*lr"],"metadata":{"id":"jPoFkE8eVBkh","executionInfo":{"status":"ok","timestamp":1704192186328,"user_tz":-330,"elapsed":1103,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["output"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U4QIqWQHYilz","executionInfo":{"status":"ok","timestamp":1704192186329,"user_tz":-330,"elapsed":19,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"0f1f6ee3-9e2e-45db-887f-762f140514fa"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.94751026],\n","       [0.06316337],\n","       [0.97936206]])"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["Using Tensorflow\n"],"metadata":{"id":"IE4EvwmBtMGs"}},{"cell_type":"code","source":["import tensorflow as tf\n","print(\"TensorFlow version:\", tf.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jANfhGxMYjth","executionInfo":{"status":"ok","timestamp":1704192186330,"user_tz":-330,"elapsed":18,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"4cc00744-53db-46d9-9ebb-e44f00140bd0"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["TensorFlow version: 2.12.0\n"]}]},{"cell_type":"code","source":["mnist = tf.keras.datasets.mnist\n","\n","(x_train, y_train),(x_test, y_test) = mnist.load_data()\n","x_train, x_test = x_train / 255.0, x_test / 255.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sHX2IWMnnYpp","executionInfo":{"status":"ok","timestamp":1704192187658,"user_tz":-330,"elapsed":1341,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"3b0fc008-f9ae-4158-dc5f-50b12be77195"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["model = tf.keras.models.Sequential([\n","  tf.keras.layers.Flatten(input_shape=(28, 28)),\n","  tf.keras.layers.Dense(128, activation='relu'),\n","  tf.keras.layers.Dropout(0.2),\n","  tf.keras.layers.Dense(10)\n","])"],"metadata":{"id":"-VsRCo-Tnrri","executionInfo":{"status":"ok","timestamp":1704192188289,"user_tz":-330,"elapsed":637,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["predictions = model(x_train[:1]).numpy()\n","predictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i3esH75wofx4","executionInfo":{"status":"ok","timestamp":1704192188290,"user_tz":-330,"elapsed":32,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"494b4911-7127-4e50-b9d3-0db14e2c6bdd"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.1852543 , -0.3483064 ,  0.40745482, -0.2595708 ,  0.2572092 ,\n","        -0.21753877, -0.172215  ,  0.01610859,  0.5764712 ,  0.2452691 ]],\n","      dtype=float32)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["tf.nn.softmax(predictions).numpy()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bCI_rw2gooPn","executionInfo":{"status":"ok","timestamp":1704192188290,"user_tz":-330,"elapsed":25,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"ada0dc9e-be9d-459f-b15f-b5f11fb28890"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.07675893, 0.06521031, 0.13884789, 0.07126129, 0.11947811,\n","        0.07432039, 0.07776637, 0.09388144, 0.16441526, 0.11806002]],\n","      dtype=float32)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)"],"metadata":{"id":"4GOQelxpos9V","executionInfo":{"status":"ok","timestamp":1704192188291,"user_tz":-330,"elapsed":21,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["loss_fn(y_train[:1], predictions).numpy()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A39nG4KPpBX8","executionInfo":{"status":"ok","timestamp":1704192188291,"user_tz":-330,"elapsed":19,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"5f12adbb-56c5-46ca-c27b-dae49d7bd564"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.59937"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["model.compile(optimizer='adam',\n","              loss=loss_fn,\n","              metrics=['accuracy'])"],"metadata":{"id":"abMefz2RpEwm","executionInfo":{"status":"ok","timestamp":1704192188653,"user_tz":-330,"elapsed":376,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["model.fit(x_train, y_train, epochs=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yw7gJta-pJFy","executionInfo":{"status":"ok","timestamp":1704192273849,"user_tz":-330,"elapsed":85203,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"38250a8a-c6a2-475d-ab9b-846759af90c8"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","1875/1875 [==============================] - 19s 9ms/step - loss: 0.2933 - accuracy: 0.9148\n","Epoch 2/5\n","1875/1875 [==============================] - 14s 7ms/step - loss: 0.1440 - accuracy: 0.9574\n","Epoch 3/5\n","1875/1875 [==============================] - 10s 5ms/step - loss: 0.1064 - accuracy: 0.9679\n","Epoch 4/5\n","1875/1875 [==============================] - 6s 3ms/step - loss: 0.0883 - accuracy: 0.9730\n","Epoch 5/5\n","1875/1875 [==============================] - 7s 4ms/step - loss: 0.0751 - accuracy: 0.9766\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7feba4d425c0>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["model.evaluate(x_test,  y_test, verbose=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uNGRakqopLri","executionInfo":{"status":"ok","timestamp":1704192274441,"user_tz":-330,"elapsed":625,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"6358b2ca-741a-44f4-829a-4ab8e1126f05"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 - 1s - loss: 0.0730 - accuracy: 0.9772 - 625ms/epoch - 2ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.07297753542661667, 0.9771999716758728]"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["Flic dataset using tensorflow"],"metadata":{"id":"3g00LuYktRmy"}},{"cell_type":"code","source":["from tensorflow.keras.datasets import cifar10\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n","\n","# Normalize pixel values to between 0 and 1\n","x_train, x_test = x_train / 255.0, x_test / 255.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0asXcvaCpXAC","executionInfo":{"status":"ok","timestamp":1704192281556,"user_tz":-330,"elapsed":7123,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"1dad7b6e-15e4-471a-dca3-d053f665dcec"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170498071/170498071 [==============================] - 2s 0us/step\n"]}]},{"cell_type":"code","source":["model = tf.keras.models.Sequential([\n","  tf.keras.layers.Flatten(input_shape=(480, 720)),\n","  tf.keras.layers.Dense(128, activation='relu'),\n","  tf.keras.layers.Dropout(0.2),\n","  tf.keras.layers.Dense(10)\n","])"],"metadata":{"id":"nqcKEwWprbin","executionInfo":{"status":"ok","timestamp":1704192282468,"user_tz":-330,"elapsed":919,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["print(\"Input shape expected by the model:\", model.input_shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OQDo3jg7vvTm","executionInfo":{"status":"ok","timestamp":1704192282469,"user_tz":-330,"elapsed":15,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"b723acec-c483-47c6-ce6b-2737d421313e"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Input shape expected by the model: (None, 480, 720)\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers, models\n","\n","# Assuming you have the model definition similar to what you provided earlier\n","# model = Sequential(...)\n","# ...\n","\n","# Modify the model architecture to handle resized images directly\n","model = models.Sequential()\n","model.add(layers.InputLayer(input_shape=(480, 720, 3)))  # Adjust input shape\n","model.add(layers.Flatten())  # Flatten layer\n","model.add(layers.Dense(64, activation='relu'))\n","model.add(layers.Dense(32, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Train the model if necessary\n","# model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))\n","\n","# Resize input images to match the model's expected input shape\n","resized_images = tf.image.resize(x_train[:1], (480, 720))\n","\n","# Make predictions\n","predictions = model.predict(resized_images)\n","print(predictions)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"doE8nxjtrpLa","executionInfo":{"status":"ok","timestamp":1704192283643,"user_tz":-330,"elapsed":1182,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"f03a13b7-2f14-4329-860c-78a72e837399"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 132ms/step\n","[[0.4147931]]\n"]}]},{"cell_type":"code","source":["tf.nn.softmax(predictions).numpy()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jerwg1xLrp15","executionInfo":{"status":"ok","timestamp":1704192283644,"user_tz":-330,"elapsed":17,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"9b8286bc-bd9c-4728-f7f4-2e625e651c0f"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.]], dtype=float32)"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)"],"metadata":{"id":"hoLMEHakrtcE","executionInfo":{"status":"ok","timestamp":1704192283644,"user_tz":-330,"elapsed":12,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers, models\n","\n","# Assuming you have the model definition similar to what you provided earlier\n","# model = Sequential(...)\n","# ...\n","\n","# Modify the model architecture to handle resized images directly\n","model = models.Sequential()\n","model.add(layers.InputLayer(input_shape=(480, 720, 3)))  # Adjust input shape\n","model.add(layers.Flatten())  # Flatten layer\n","model.add(layers.Dense(64, activation='relu'))\n","model.add(layers.Dense(32, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Train the model if necessary\n","# model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))\n","\n","# Resize input images to match the model's expected input shape\n","resized_images = tf.image.resize(x_train[:1], (480, 720))\n","\n","# Make predictions\n","predictions = model.predict(resized_images)\n","\n","# Assuming y_train is binary (0 or 1)\n","y_true = y_train[:1]\n","\n","# Calculate binary cross-entropy loss\n","loss_fn = tf.keras.losses.BinaryCrossentropy()\n","loss_value = loss_fn(y_true, predictions).numpy()\n","\n","print(\"Binary Cross-Entropy Loss:\", loss_value)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"czm-qQL0ry5Y","executionInfo":{"status":"ok","timestamp":1704192284380,"user_tz":-330,"elapsed":747,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}},"outputId":"d1d1ca62-bc98-4443-b30b-38ebaac36783"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 90ms/step\n","Binary Cross-Entropy Loss: 0.42489147\n"]}]},{"cell_type":"code","source":["model.compile(optimizer='adam',\n","              loss=loss_fn,\n","              metrics=['accuracy'])"],"metadata":{"id":"oNyOLQCgr3IU","executionInfo":{"status":"ok","timestamp":1704192284381,"user_tz":-330,"elapsed":10,"user":{"displayName":"Harisowndharya V","userId":"11987712687495952677"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers, models\n","\n","# Assuming you have the model definition similar to what you provided earlier\n","# model = Sequential(...)\n","# ...\n","\n","# Resize input images to match the model's expected input shape\n","resized_x_train = tf.image.resize(x_train, (480, 720)).numpy()\n","\n","# Modify the model architecture to handle resized images directly\n","model = models.Sequential()\n","model.add(layers.InputLayer(input_shape=(480, 720, 3)))  # Adjust input shape\n","model.add(layers.Flatten())  # Flatten layer\n","model.add(layers.Dense(64, activation='relu'))\n","model.add(layers.Dense(32, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit(resized_x_train, y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n"],"metadata":{"id":"jjLcmI1nr6Va"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.evaluate(x_test,  y_test, verbose=2)"],"metadata":{"id":"2muV7YW5r-Gf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"81mHn9aKsIwE"},"execution_count":null,"outputs":[]}]}